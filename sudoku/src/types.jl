Base.@kwdef mutable struct Sudoku
    const raw   ::Array{Int, 2}
    const answer::Array{Int, 2}
          solve ::Array{Int, 2} = [0 0]
          mode  ::Symbol
    function Sudoku(raw, answer, solve, mode)
        solve = copy(raw)
        new(raw, answer, solve, mode)
    end
end

function Base.show(io::IO, sudo::Sudoku)
    maximum(sudo.solve) < 10 ? nothing : error("Number shoule belong to 1~9")
    a = Array{Any}(sudo.solve)
    b = Int(0)
    @inbounds for i in eachindex(a)
        if a[i] == 0
            a[i] = " "
            b += 1
        end
    end
    print("\e[0;0H\e[2J")
    print(io, """
       C1  C2  C3  C4  C5  C6  C7  C8  C9
      ┌───┬───┬───┬───┬───┬───┬───┬───┬───┐
    R1│ $(a[1]) │ $(a[10]) │ $(a[19]) │ $(a[28]) | $(a[37]) | $(a[46]) | $(a[55]) | $(a[64]) | $(a[73]) |R1
      ├───┼───┼───┼───┼───┼───┼───┼───┼───┤
    R2│ $(a[2]) │ $(a[11]) │ $(a[20]) │ $(a[29]) | $(a[38]) | $(a[47]) | $(a[56]) | $(a[65]) | $(a[74]) |R2
      ├───┼───┼───┼───┼───┼───┼───┼───┼───┤
    R3│ $(a[3]) │ $(a[12]) │ $(a[21]) │ $(a[30]) | $(a[39]) | $(a[48]) | $(a[57]) | $(a[66]) | $(a[75]) |R3
      ├───┼───┼───┼───┼───┼───┼───┼───┼───┤
    R4│ $(a[4]) │ $(a[13]) │ $(a[22]) │ $(a[31]) | $(a[40]) | $(a[49]) | $(a[58]) | $(a[67]) | $(a[76]) |R4
      ├───┼───┼───┼───┼───┼───┼───┼───┼───┤
    R5│ $(a[5]) │ $(a[14]) │ $(a[23]) │ $(a[32]) | $(a[41]) | $(a[50]) | $(a[59]) | $(a[68]) | $(a[77]) |R5
      ├───┼───┼───┼───┼───┼───┼───┼───┼───┤
    R6│ $(a[6]) │ $(a[15]) │ $(a[24]) │ $(a[33]) | $(a[42]) | $(a[51]) | $(a[60]) | $(a[69]) | $(a[78]) |R6
      ├───┼───┼───┼───┼───┼───┼───┼───┼───┤
    R7│ $(a[7]) │ $(a[16]) │ $(a[25]) │ $(a[34]) | $(a[43]) | $(a[52]) | $(a[61]) | $(a[70]) | $(a[79]) |R7
      ├───┼───┼───┼───┼───┼───┼───┼───┼───┤
    R8│ $(a[8]) │ $(a[17]) │ $(a[26]) │ $(a[35]) | $(a[44]) | $(a[53]) | $(a[62]) | $(a[71]) | $(a[80]) |R8
      ├───┼───┼───┼───┼───┼───┼───┼───┼───┤
    R9│ $(a[9]) │ $(a[18]) │ $(a[27]) │ $(a[36]) | $(a[45]) | $(a[54]) | $(a[63]) | $(a[72]) | $(a[81]) |R9
      └───┴───┴───┴───┴───┴───┴───┴───┴───┘
       C1  C2  C3  C4  C5  C6  C7  C8  C9

         Mode: $(sudo.mode) | Filling rate: $(trunc(Int, (1-b/81)*100))%
    """)
    return nothing
end
